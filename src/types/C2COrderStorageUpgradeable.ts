/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import {
  BaseContract,
  BigNumber,
  BigNumberish,
  BytesLike,
  CallOverrides,
  PopulatedTransaction,
  Signer,
  utils,
} from "ethers";
import { FunctionFragment, Result, EventFragment } from "@ethersproject/abi";
import { Listener, Provider } from "@ethersproject/providers";
import { TypedEventFilter, TypedEvent, TypedListener, OnEvent } from "./common";

export interface C2COrderStorageUpgradeableInterface extends utils.Interface {
  contractName: "C2COrderStorageUpgradeable";
  functions: {
    "c2COrderMap(uint256)": FunctionFragment;
    "orderAt(uint256)": FunctionFragment;
    "orderIds()": FunctionFragment;
    "orderLength()": FunctionFragment;
    "ownerC2COrderIds(address)": FunctionFragment;
    "ownerC2COrderLength(address)": FunctionFragment;
    "ownerC2COrderMap(address,uint256)": FunctionFragment;
  };

  encodeFunctionData(
    functionFragment: "c2COrderMap",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "orderAt",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(functionFragment: "orderIds", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "orderLength",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "ownerC2COrderIds",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "ownerC2COrderLength",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "ownerC2COrderMap",
    values: [string, BigNumberish]
  ): string;

  decodeFunctionResult(
    functionFragment: "c2COrderMap",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "orderAt", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "orderIds", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "orderLength",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "ownerC2COrderIds",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "ownerC2COrderLength",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "ownerC2COrderMap",
    data: BytesLike
  ): Result;

  events: {
    "AddC2COrderd(uint256,address,uint256,address,uint256,uint256,uint256,uint256)": EventFragment;
    "RemoveC2COrderd(uint256)": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "AddC2COrderd"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "RemoveC2COrderd"): EventFragment;
}

export type AddC2COrderdEvent = TypedEvent<
  [
    BigNumber,
    string,
    BigNumber,
    string,
    BigNumber,
    BigNumber,
    BigNumber,
    BigNumber
  ],
  {
    id: BigNumber;
    owner: string;
    adId: BigNumber;
    seller: string;
    quantity: BigNumber;
    price: BigNumber;
    amount: BigNumber;
    createTime: BigNumber;
  }
>;

export type AddC2COrderdEventFilter = TypedEventFilter<AddC2COrderdEvent>;

export type RemoveC2COrderdEvent = TypedEvent<[BigNumber], { id: BigNumber }>;

export type RemoveC2COrderdEventFilter = TypedEventFilter<RemoveC2COrderdEvent>;

export interface C2COrderStorageUpgradeable extends BaseContract {
  contractName: "C2COrderStorageUpgradeable";
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  interface: C2COrderStorageUpgradeableInterface;

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TEvent>>;

  listeners<TEvent extends TypedEvent>(
    eventFilter?: TypedEventFilter<TEvent>
  ): Array<TypedListener<TEvent>>;
  listeners(eventName?: string): Array<Listener>;
  removeAllListeners<TEvent extends TypedEvent>(
    eventFilter: TypedEventFilter<TEvent>
  ): this;
  removeAllListeners(eventName?: string): this;
  off: OnEvent<this>;
  on: OnEvent<this>;
  once: OnEvent<this>;
  removeListener: OnEvent<this>;

  functions: {
    c2COrderMap(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<
      [
        BigNumber,
        string,
        BigNumber,
        string,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber
      ] & {
        id: BigNumber;
        owner: string;
        adId: BigNumber;
        seller: string;
        quantity: BigNumber;
        price: BigNumber;
        amount: BigNumber;
        createTime: BigNumber;
      }
    >;

    orderAt(
      index: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    orderIds(overrides?: CallOverrides): Promise<[BigNumber[]]>;

    orderLength(overrides?: CallOverrides): Promise<[BigNumber]>;

    ownerC2COrderIds(
      owner: string,
      overrides?: CallOverrides
    ): Promise<[BigNumber[]]>;

    ownerC2COrderLength(
      owner: string,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    ownerC2COrderMap(
      arg0: string,
      arg1: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;
  };

  c2COrderMap(
    arg0: BigNumberish,
    overrides?: CallOverrides
  ): Promise<
    [
      BigNumber,
      string,
      BigNumber,
      string,
      BigNumber,
      BigNumber,
      BigNumber,
      BigNumber
    ] & {
      id: BigNumber;
      owner: string;
      adId: BigNumber;
      seller: string;
      quantity: BigNumber;
      price: BigNumber;
      amount: BigNumber;
      createTime: BigNumber;
    }
  >;

  orderAt(index: BigNumberish, overrides?: CallOverrides): Promise<BigNumber>;

  orderIds(overrides?: CallOverrides): Promise<BigNumber[]>;

  orderLength(overrides?: CallOverrides): Promise<BigNumber>;

  ownerC2COrderIds(
    owner: string,
    overrides?: CallOverrides
  ): Promise<BigNumber[]>;

  ownerC2COrderLength(
    owner: string,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  ownerC2COrderMap(
    arg0: string,
    arg1: BigNumberish,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  callStatic: {
    c2COrderMap(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<
      [
        BigNumber,
        string,
        BigNumber,
        string,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber
      ] & {
        id: BigNumber;
        owner: string;
        adId: BigNumber;
        seller: string;
        quantity: BigNumber;
        price: BigNumber;
        amount: BigNumber;
        createTime: BigNumber;
      }
    >;

    orderAt(index: BigNumberish, overrides?: CallOverrides): Promise<BigNumber>;

    orderIds(overrides?: CallOverrides): Promise<BigNumber[]>;

    orderLength(overrides?: CallOverrides): Promise<BigNumber>;

    ownerC2COrderIds(
      owner: string,
      overrides?: CallOverrides
    ): Promise<BigNumber[]>;

    ownerC2COrderLength(
      owner: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    ownerC2COrderMap(
      arg0: string,
      arg1: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;
  };

  filters: {
    "AddC2COrderd(uint256,address,uint256,address,uint256,uint256,uint256,uint256)"(
      id?: BigNumberish | null,
      owner?: string | null,
      adId?: BigNumberish | null,
      seller?: null,
      quantity?: null,
      price?: null,
      amount?: null,
      createTime?: null
    ): AddC2COrderdEventFilter;
    AddC2COrderd(
      id?: BigNumberish | null,
      owner?: string | null,
      adId?: BigNumberish | null,
      seller?: null,
      quantity?: null,
      price?: null,
      amount?: null,
      createTime?: null
    ): AddC2COrderdEventFilter;

    "RemoveC2COrderd(uint256)"(
      id?: BigNumberish | null
    ): RemoveC2COrderdEventFilter;
    RemoveC2COrderd(id?: BigNumberish | null): RemoveC2COrderdEventFilter;
  };

  estimateGas: {
    c2COrderMap(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    orderAt(index: BigNumberish, overrides?: CallOverrides): Promise<BigNumber>;

    orderIds(overrides?: CallOverrides): Promise<BigNumber>;

    orderLength(overrides?: CallOverrides): Promise<BigNumber>;

    ownerC2COrderIds(
      owner: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    ownerC2COrderLength(
      owner: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    ownerC2COrderMap(
      arg0: string,
      arg1: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    c2COrderMap(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    orderAt(
      index: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    orderIds(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    orderLength(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    ownerC2COrderIds(
      owner: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    ownerC2COrderLength(
      owner: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    ownerC2COrderMap(
      arg0: string,
      arg1: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;
  };
}
