/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import {
  BaseContract,
  BigNumber,
  BigNumberish,
  BytesLike,
  CallOverrides,
  ContractTransaction,
  Overrides,
  PayableOverrides,
  PopulatedTransaction,
  Signer,
  utils,
} from "ethers";
import { FunctionFragment, Result, EventFragment } from "@ethersproject/abi";
import { Listener, Provider } from "@ethersproject/providers";
import { TypedEventFilter, TypedEvent, TypedListener, OnEvent } from "./common";

export interface TcpPositionInterface extends utils.Interface {
  contractName: "TcpPosition";
  functions: {
    "_assessLevel(uint256)": FunctionFragment;
    "_cycleTime()": FunctionFragment;
    "_dataToChain()": FunctionFragment;
    "_halveTime()": FunctionFragment;
    "_harvestFee()": FunctionFragment;
    "_isActive(address)": FunctionFragment;
    "_isMiner(address)": FunctionFragment;
    "_levelOneLockAmount()": FunctionFragment;
    "_levelRates(uint256)": FunctionFragment;
    "_secondsRate()": FunctionFragment;
    "_token()": FunctionFragment;
    "decimalsUnit()": FunctionFragment;
    "defaultParent()": FunctionFragment;
    "getLockAmount(address)": FunctionFragment;
    "getParentAddress(address)": FunctionFragment;
    "getRecommendAccounts(address)": FunctionFragment;
    "getUnlockAmount(address)": FunctionFragment;
    "getUserInfo(address)": FunctionFragment;
    "getUserUnlockTimeAndAmount(address,uint256)": FunctionFragment;
    "getUserUnlockTimeAndAmountKeys(address)": FunctionFragment;
    "getWaitHarvest(address)": FunctionFragment;
    "harvest()": FunctionFragment;
    "harvestUnlockAmount()": FunctionFragment;
    "init()": FunctionFragment;
    "inviteRate(uint256)": FunctionFragment;
    "lock(address,uint256,address)": FunctionFragment;
    "lockByMiner(address,uint256)": FunctionFragment;
    "lockInit(address,uint256)": FunctionFragment;
    "owner()": FunctionFragment;
    "relock()": FunctionFragment;
    "renounceOwnership()": FunctionFragment;
    "replaceFromAddress(address)": FunctionFragment;
    "replaceToAddress(address)": FunctionFragment;
    "returnTransferIn(address,address,uint256)": FunctionFragment;
    "setAssessLevel(uint256[])": FunctionFragment;
    "setDefaultParentAddress(address)": FunctionFragment;
    "setHalveTime(uint256)": FunctionFragment;
    "setHarvestFee(uint256)": FunctionFragment;
    "setInviteRate(uint256[])": FunctionFragment;
    "setLevelOneLockAmount(uint256)": FunctionFragment;
    "setLevesRate(uint256[])": FunctionFragment;
    "setMiner(address,bool)": FunctionFragment;
    "setParentAddress(address,address)": FunctionFragment;
    "setReplaceAddress(address,address)": FunctionFragment;
    "transferOwnership(address)": FunctionFragment;
    "unlockByTime(address,uint256)": FunctionFragment;
    "userInfos(address)": FunctionFragment;
  };

  encodeFunctionData(
    functionFragment: "_assessLevel",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "_cycleTime",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "_dataToChain",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "_halveTime",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "_harvestFee",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "_isActive", values: [string]): string;
  encodeFunctionData(functionFragment: "_isMiner", values: [string]): string;
  encodeFunctionData(
    functionFragment: "_levelOneLockAmount",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "_levelRates",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "_secondsRate",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "_token", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "decimalsUnit",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "defaultParent",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getLockAmount",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "getParentAddress",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "getRecommendAccounts",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "getUnlockAmount",
    values: [string]
  ): string;
  encodeFunctionData(functionFragment: "getUserInfo", values: [string]): string;
  encodeFunctionData(
    functionFragment: "getUserUnlockTimeAndAmount",
    values: [string, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "getUserUnlockTimeAndAmountKeys",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "getWaitHarvest",
    values: [string]
  ): string;
  encodeFunctionData(functionFragment: "harvest", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "harvestUnlockAmount",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "init", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "inviteRate",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "lock",
    values: [string, BigNumberish, string]
  ): string;
  encodeFunctionData(
    functionFragment: "lockByMiner",
    values: [string, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "lockInit",
    values: [string, BigNumberish]
  ): string;
  encodeFunctionData(functionFragment: "owner", values?: undefined): string;
  encodeFunctionData(functionFragment: "relock", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "renounceOwnership",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "replaceFromAddress",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "replaceToAddress",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "returnTransferIn",
    values: [string, string, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "setAssessLevel",
    values: [BigNumberish[]]
  ): string;
  encodeFunctionData(
    functionFragment: "setDefaultParentAddress",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "setHalveTime",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "setHarvestFee",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "setInviteRate",
    values: [BigNumberish[]]
  ): string;
  encodeFunctionData(
    functionFragment: "setLevelOneLockAmount",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "setLevesRate",
    values: [BigNumberish[]]
  ): string;
  encodeFunctionData(
    functionFragment: "setMiner",
    values: [string, boolean]
  ): string;
  encodeFunctionData(
    functionFragment: "setParentAddress",
    values: [string, string]
  ): string;
  encodeFunctionData(
    functionFragment: "setReplaceAddress",
    values: [string, string]
  ): string;
  encodeFunctionData(
    functionFragment: "transferOwnership",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "unlockByTime",
    values: [string, BigNumberish]
  ): string;
  encodeFunctionData(functionFragment: "userInfos", values: [string]): string;

  decodeFunctionResult(
    functionFragment: "_assessLevel",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "_cycleTime", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "_dataToChain",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "_halveTime", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "_harvestFee",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "_isActive", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "_isMiner", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "_levelOneLockAmount",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "_levelRates",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "_secondsRate",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "_token", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "decimalsUnit",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "defaultParent",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getLockAmount",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getParentAddress",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getRecommendAccounts",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getUnlockAmount",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getUserInfo",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getUserUnlockTimeAndAmount",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getUserUnlockTimeAndAmountKeys",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getWaitHarvest",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "harvest", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "harvestUnlockAmount",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "init", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "inviteRate", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "lock", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "lockByMiner",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "lockInit", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "owner", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "relock", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "renounceOwnership",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "replaceFromAddress",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "replaceToAddress",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "returnTransferIn",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setAssessLevel",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setDefaultParentAddress",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setHalveTime",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setHarvestFee",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setInviteRate",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setLevelOneLockAmount",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setLevesRate",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "setMiner", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "setParentAddress",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setReplaceAddress",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "transferOwnership",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "unlockByTime",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "userInfos", data: BytesLike): Result;

  events: {
    "Harvest(address,uint256)": EventFragment;
    "HarvestUnlockAmount(address,uint256)": EventFragment;
    "LevelReward(address,address,uint256)": EventFragment;
    "LevelUp(address,uint256)": EventFragment;
    "LockPosition(address,uint256)": EventFragment;
    "OwnershipTransferred(address,address)": EventFragment;
    "RecommendReward(address,address,uint256)": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "Harvest"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "HarvestUnlockAmount"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "LevelReward"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "LevelUp"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "LockPosition"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "OwnershipTransferred"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "RecommendReward"): EventFragment;
}

export type HarvestEvent = TypedEvent<
  [string, BigNumber],
  { _from: string; _value: BigNumber }
>;

export type HarvestEventFilter = TypedEventFilter<HarvestEvent>;

export type HarvestUnlockAmountEvent = TypedEvent<
  [string, BigNumber],
  { _from: string; _value: BigNumber }
>;

export type HarvestUnlockAmountEventFilter =
  TypedEventFilter<HarvestUnlockAmountEvent>;

export type LevelRewardEvent = TypedEvent<
  [string, string, BigNumber],
  { _from: string; _to: string; _value: BigNumber }
>;

export type LevelRewardEventFilter = TypedEventFilter<LevelRewardEvent>;

export type LevelUpEvent = TypedEvent<
  [string, BigNumber],
  { _to: string; _value: BigNumber }
>;

export type LevelUpEventFilter = TypedEventFilter<LevelUpEvent>;

export type LockPositionEvent = TypedEvent<
  [string, BigNumber],
  { _from: string; _value: BigNumber }
>;

export type LockPositionEventFilter = TypedEventFilter<LockPositionEvent>;

export type OwnershipTransferredEvent = TypedEvent<
  [string, string],
  { previousOwner: string; newOwner: string }
>;

export type OwnershipTransferredEventFilter =
  TypedEventFilter<OwnershipTransferredEvent>;

export type RecommendRewardEvent = TypedEvent<
  [string, string, BigNumber],
  { _from: string; _to: string; _value: BigNumber }
>;

export type RecommendRewardEventFilter = TypedEventFilter<RecommendRewardEvent>;

export interface TcpPosition extends BaseContract {
  contractName: "TcpPosition";
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  interface: TcpPositionInterface;

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TEvent>>;

  listeners<TEvent extends TypedEvent>(
    eventFilter?: TypedEventFilter<TEvent>
  ): Array<TypedListener<TEvent>>;
  listeners(eventName?: string): Array<Listener>;
  removeAllListeners<TEvent extends TypedEvent>(
    eventFilter: TypedEventFilter<TEvent>
  ): this;
  removeAllListeners(eventName?: string): this;
  off: OnEvent<this>;
  on: OnEvent<this>;
  once: OnEvent<this>;
  removeListener: OnEvent<this>;

  functions: {
    _assessLevel(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    _cycleTime(overrides?: CallOverrides): Promise<[BigNumber]>;

    _dataToChain(overrides?: CallOverrides): Promise<[string]>;

    _halveTime(overrides?: CallOverrides): Promise<[BigNumber]>;

    _harvestFee(overrides?: CallOverrides): Promise<[BigNumber]>;

    _isActive(
      userAddress: string,
      overrides?: CallOverrides
    ): Promise<[boolean]>;

    _isMiner(arg0: string, overrides?: CallOverrides): Promise<[boolean]>;

    _levelOneLockAmount(overrides?: CallOverrides): Promise<[BigNumber]>;

    _levelRates(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    _secondsRate(overrides?: CallOverrides): Promise<[BigNumber]>;

    _token(overrides?: CallOverrides): Promise<[string]>;

    decimalsUnit(overrides?: CallOverrides): Promise<[BigNumber]>;

    defaultParent(overrides?: CallOverrides): Promise<[string]>;

    getLockAmount(
      userAddress: string,
      overrides?: CallOverrides
    ): Promise<[BigNumber] & { lockAmount: BigNumber }>;

    getParentAddress(
      userAddress: string,
      overrides?: CallOverrides
    ): Promise<[string] & { parentAddress: string }>;

    getRecommendAccounts(
      userAddress: string,
      overrides?: CallOverrides
    ): Promise<[string[]]>;

    getUnlockAmount(
      userAddress: string,
      overrides?: CallOverrides
    ): Promise<[BigNumber] & { unlockAmount: BigNumber }>;

    getUserInfo(
      account: string,
      overrides?: CallOverrides
    ): Promise<
      [
        string,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber
      ] & {
        parentAddress: string;
        harvestTime: BigNumber;
        lockAmount: BigNumber;
        harvestAmount: BigNumber;
        recommendUser: BigNumber;
        recommendReward: BigNumber;
        level: BigNumber;
        levelReward: BigNumber;
      }
    >;

    getUserUnlockTimeAndAmount(
      userAddress: string,
      unlockTime: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    getUserUnlockTimeAndAmountKeys(
      userAddress: string,
      overrides?: CallOverrides
    ): Promise<[BigNumber[]]>;

    getWaitHarvest(
      userAddress: string,
      overrides?: CallOverrides
    ): Promise<[BigNumber] & { waitHarvest: BigNumber }>;

    harvest(
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    harvestUnlockAmount(
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    init(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    inviteRate(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    lock(
      msgSender: string,
      amount: BigNumberish,
      parent: string,
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    lockByMiner(
      recipient: string,
      amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    lockInit(
      recipient: string,
      amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    owner(overrides?: CallOverrides): Promise<[string]>;

    relock(
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    renounceOwnership(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    replaceFromAddress(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<[string]>;

    replaceToAddress(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<[string]>;

    returnTransferIn(
      con: string,
      addr: string,
      fee: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    setAssessLevel(
      leves: BigNumberish[],
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    setDefaultParentAddress(
      parent: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    setHalveTime(
      time: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    setHarvestFee(
      rate: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    setInviteRate(
      rate: BigNumberish[],
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    setLevelOneLockAmount(
      levelOneLockAmount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    setLevesRate(
      levesRate: BigNumberish[],
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    setMiner(
      minerAddress: string,
      isMiner: boolean,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    setParentAddress(
      user: string,
      parent: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    setReplaceAddress(
      from: string,
      to: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    transferOwnership(
      newOwner: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    unlockByTime(
      recipient: string,
      _unlockTime: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    userInfos(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<
      [
        string,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber
      ] & {
        parentAddress: string;
        harvestTime: BigNumber;
        lockAmount: BigNumber;
        harvestAmount: BigNumber;
        recommendReward: BigNumber;
        level: BigNumber;
        levelReward: BigNumber;
      }
    >;
  };

  _assessLevel(
    arg0: BigNumberish,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  _cycleTime(overrides?: CallOverrides): Promise<BigNumber>;

  _dataToChain(overrides?: CallOverrides): Promise<string>;

  _halveTime(overrides?: CallOverrides): Promise<BigNumber>;

  _harvestFee(overrides?: CallOverrides): Promise<BigNumber>;

  _isActive(userAddress: string, overrides?: CallOverrides): Promise<boolean>;

  _isMiner(arg0: string, overrides?: CallOverrides): Promise<boolean>;

  _levelOneLockAmount(overrides?: CallOverrides): Promise<BigNumber>;

  _levelRates(
    arg0: BigNumberish,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  _secondsRate(overrides?: CallOverrides): Promise<BigNumber>;

  _token(overrides?: CallOverrides): Promise<string>;

  decimalsUnit(overrides?: CallOverrides): Promise<BigNumber>;

  defaultParent(overrides?: CallOverrides): Promise<string>;

  getLockAmount(
    userAddress: string,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  getParentAddress(
    userAddress: string,
    overrides?: CallOverrides
  ): Promise<string>;

  getRecommendAccounts(
    userAddress: string,
    overrides?: CallOverrides
  ): Promise<string[]>;

  getUnlockAmount(
    userAddress: string,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  getUserInfo(
    account: string,
    overrides?: CallOverrides
  ): Promise<
    [
      string,
      BigNumber,
      BigNumber,
      BigNumber,
      BigNumber,
      BigNumber,
      BigNumber,
      BigNumber
    ] & {
      parentAddress: string;
      harvestTime: BigNumber;
      lockAmount: BigNumber;
      harvestAmount: BigNumber;
      recommendUser: BigNumber;
      recommendReward: BigNumber;
      level: BigNumber;
      levelReward: BigNumber;
    }
  >;

  getUserUnlockTimeAndAmount(
    userAddress: string,
    unlockTime: BigNumberish,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  getUserUnlockTimeAndAmountKeys(
    userAddress: string,
    overrides?: CallOverrides
  ): Promise<BigNumber[]>;

  getWaitHarvest(
    userAddress: string,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  harvest(
    overrides?: PayableOverrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  harvestUnlockAmount(
    overrides?: PayableOverrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  init(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  inviteRate(arg0: BigNumberish, overrides?: CallOverrides): Promise<BigNumber>;

  lock(
    msgSender: string,
    amount: BigNumberish,
    parent: string,
    overrides?: PayableOverrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  lockByMiner(
    recipient: string,
    amount: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  lockInit(
    recipient: string,
    amount: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  owner(overrides?: CallOverrides): Promise<string>;

  relock(
    overrides?: PayableOverrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  renounceOwnership(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  replaceFromAddress(arg0: string, overrides?: CallOverrides): Promise<string>;

  replaceToAddress(arg0: string, overrides?: CallOverrides): Promise<string>;

  returnTransferIn(
    con: string,
    addr: string,
    fee: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  setAssessLevel(
    leves: BigNumberish[],
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  setDefaultParentAddress(
    parent: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  setHalveTime(
    time: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  setHarvestFee(
    rate: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  setInviteRate(
    rate: BigNumberish[],
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  setLevelOneLockAmount(
    levelOneLockAmount: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  setLevesRate(
    levesRate: BigNumberish[],
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  setMiner(
    minerAddress: string,
    isMiner: boolean,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  setParentAddress(
    user: string,
    parent: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  setReplaceAddress(
    from: string,
    to: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  transferOwnership(
    newOwner: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  unlockByTime(
    recipient: string,
    _unlockTime: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  userInfos(
    arg0: string,
    overrides?: CallOverrides
  ): Promise<
    [
      string,
      BigNumber,
      BigNumber,
      BigNumber,
      BigNumber,
      BigNumber,
      BigNumber
    ] & {
      parentAddress: string;
      harvestTime: BigNumber;
      lockAmount: BigNumber;
      harvestAmount: BigNumber;
      recommendReward: BigNumber;
      level: BigNumber;
      levelReward: BigNumber;
    }
  >;

  callStatic: {
    _assessLevel(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    _cycleTime(overrides?: CallOverrides): Promise<BigNumber>;

    _dataToChain(overrides?: CallOverrides): Promise<string>;

    _halveTime(overrides?: CallOverrides): Promise<BigNumber>;

    _harvestFee(overrides?: CallOverrides): Promise<BigNumber>;

    _isActive(userAddress: string, overrides?: CallOverrides): Promise<boolean>;

    _isMiner(arg0: string, overrides?: CallOverrides): Promise<boolean>;

    _levelOneLockAmount(overrides?: CallOverrides): Promise<BigNumber>;

    _levelRates(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    _secondsRate(overrides?: CallOverrides): Promise<BigNumber>;

    _token(overrides?: CallOverrides): Promise<string>;

    decimalsUnit(overrides?: CallOverrides): Promise<BigNumber>;

    defaultParent(overrides?: CallOverrides): Promise<string>;

    getLockAmount(
      userAddress: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getParentAddress(
      userAddress: string,
      overrides?: CallOverrides
    ): Promise<string>;

    getRecommendAccounts(
      userAddress: string,
      overrides?: CallOverrides
    ): Promise<string[]>;

    getUnlockAmount(
      userAddress: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getUserInfo(
      account: string,
      overrides?: CallOverrides
    ): Promise<
      [
        string,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber
      ] & {
        parentAddress: string;
        harvestTime: BigNumber;
        lockAmount: BigNumber;
        harvestAmount: BigNumber;
        recommendUser: BigNumber;
        recommendReward: BigNumber;
        level: BigNumber;
        levelReward: BigNumber;
      }
    >;

    getUserUnlockTimeAndAmount(
      userAddress: string,
      unlockTime: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getUserUnlockTimeAndAmountKeys(
      userAddress: string,
      overrides?: CallOverrides
    ): Promise<BigNumber[]>;

    getWaitHarvest(
      userAddress: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    harvest(overrides?: CallOverrides): Promise<void>;

    harvestUnlockAmount(overrides?: CallOverrides): Promise<void>;

    init(overrides?: CallOverrides): Promise<void>;

    inviteRate(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    lock(
      msgSender: string,
      amount: BigNumberish,
      parent: string,
      overrides?: CallOverrides
    ): Promise<void>;

    lockByMiner(
      recipient: string,
      amount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    lockInit(
      recipient: string,
      amount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    owner(overrides?: CallOverrides): Promise<string>;

    relock(overrides?: CallOverrides): Promise<void>;

    renounceOwnership(overrides?: CallOverrides): Promise<void>;

    replaceFromAddress(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<string>;

    replaceToAddress(arg0: string, overrides?: CallOverrides): Promise<string>;

    returnTransferIn(
      con: string,
      addr: string,
      fee: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    setAssessLevel(
      leves: BigNumberish[],
      overrides?: CallOverrides
    ): Promise<void>;

    setDefaultParentAddress(
      parent: string,
      overrides?: CallOverrides
    ): Promise<void>;

    setHalveTime(time: BigNumberish, overrides?: CallOverrides): Promise<void>;

    setHarvestFee(rate: BigNumberish, overrides?: CallOverrides): Promise<void>;

    setInviteRate(
      rate: BigNumberish[],
      overrides?: CallOverrides
    ): Promise<void>;

    setLevelOneLockAmount(
      levelOneLockAmount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    setLevesRate(
      levesRate: BigNumberish[],
      overrides?: CallOverrides
    ): Promise<void>;

    setMiner(
      minerAddress: string,
      isMiner: boolean,
      overrides?: CallOverrides
    ): Promise<void>;

    setParentAddress(
      user: string,
      parent: string,
      overrides?: CallOverrides
    ): Promise<void>;

    setReplaceAddress(
      from: string,
      to: string,
      overrides?: CallOverrides
    ): Promise<void>;

    transferOwnership(
      newOwner: string,
      overrides?: CallOverrides
    ): Promise<void>;

    unlockByTime(
      recipient: string,
      _unlockTime: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    userInfos(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<
      [
        string,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber
      ] & {
        parentAddress: string;
        harvestTime: BigNumber;
        lockAmount: BigNumber;
        harvestAmount: BigNumber;
        recommendReward: BigNumber;
        level: BigNumber;
        levelReward: BigNumber;
      }
    >;
  };

  filters: {
    "Harvest(address,uint256)"(
      _from?: string | null,
      _value?: null
    ): HarvestEventFilter;
    Harvest(_from?: string | null, _value?: null): HarvestEventFilter;

    "HarvestUnlockAmount(address,uint256)"(
      _from?: string | null,
      _value?: null
    ): HarvestUnlockAmountEventFilter;
    HarvestUnlockAmount(
      _from?: string | null,
      _value?: null
    ): HarvestUnlockAmountEventFilter;

    "LevelReward(address,address,uint256)"(
      _from?: string | null,
      _to?: string | null,
      _value?: null
    ): LevelRewardEventFilter;
    LevelReward(
      _from?: string | null,
      _to?: string | null,
      _value?: null
    ): LevelRewardEventFilter;

    "LevelUp(address,uint256)"(
      _to?: string | null,
      _value?: null
    ): LevelUpEventFilter;
    LevelUp(_to?: string | null, _value?: null): LevelUpEventFilter;

    "LockPosition(address,uint256)"(
      _from?: string | null,
      _value?: null
    ): LockPositionEventFilter;
    LockPosition(_from?: string | null, _value?: null): LockPositionEventFilter;

    "OwnershipTransferred(address,address)"(
      previousOwner?: string | null,
      newOwner?: string | null
    ): OwnershipTransferredEventFilter;
    OwnershipTransferred(
      previousOwner?: string | null,
      newOwner?: string | null
    ): OwnershipTransferredEventFilter;

    "RecommendReward(address,address,uint256)"(
      _from?: string | null,
      _to?: string | null,
      _value?: null
    ): RecommendRewardEventFilter;
    RecommendReward(
      _from?: string | null,
      _to?: string | null,
      _value?: null
    ): RecommendRewardEventFilter;
  };

  estimateGas: {
    _assessLevel(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    _cycleTime(overrides?: CallOverrides): Promise<BigNumber>;

    _dataToChain(overrides?: CallOverrides): Promise<BigNumber>;

    _halveTime(overrides?: CallOverrides): Promise<BigNumber>;

    _harvestFee(overrides?: CallOverrides): Promise<BigNumber>;

    _isActive(
      userAddress: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    _isMiner(arg0: string, overrides?: CallOverrides): Promise<BigNumber>;

    _levelOneLockAmount(overrides?: CallOverrides): Promise<BigNumber>;

    _levelRates(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    _secondsRate(overrides?: CallOverrides): Promise<BigNumber>;

    _token(overrides?: CallOverrides): Promise<BigNumber>;

    decimalsUnit(overrides?: CallOverrides): Promise<BigNumber>;

    defaultParent(overrides?: CallOverrides): Promise<BigNumber>;

    getLockAmount(
      userAddress: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getParentAddress(
      userAddress: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getRecommendAccounts(
      userAddress: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getUnlockAmount(
      userAddress: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getUserInfo(account: string, overrides?: CallOverrides): Promise<BigNumber>;

    getUserUnlockTimeAndAmount(
      userAddress: string,
      unlockTime: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getUserUnlockTimeAndAmountKeys(
      userAddress: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getWaitHarvest(
      userAddress: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    harvest(
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    harvestUnlockAmount(
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    init(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    inviteRate(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    lock(
      msgSender: string,
      amount: BigNumberish,
      parent: string,
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    lockByMiner(
      recipient: string,
      amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    lockInit(
      recipient: string,
      amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    owner(overrides?: CallOverrides): Promise<BigNumber>;

    relock(
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    renounceOwnership(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    replaceFromAddress(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    replaceToAddress(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    returnTransferIn(
      con: string,
      addr: string,
      fee: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    setAssessLevel(
      leves: BigNumberish[],
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    setDefaultParentAddress(
      parent: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    setHalveTime(
      time: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    setHarvestFee(
      rate: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    setInviteRate(
      rate: BigNumberish[],
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    setLevelOneLockAmount(
      levelOneLockAmount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    setLevesRate(
      levesRate: BigNumberish[],
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    setMiner(
      minerAddress: string,
      isMiner: boolean,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    setParentAddress(
      user: string,
      parent: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    setReplaceAddress(
      from: string,
      to: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    transferOwnership(
      newOwner: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    unlockByTime(
      recipient: string,
      _unlockTime: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    userInfos(arg0: string, overrides?: CallOverrides): Promise<BigNumber>;
  };

  populateTransaction: {
    _assessLevel(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    _cycleTime(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    _dataToChain(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    _halveTime(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    _harvestFee(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    _isActive(
      userAddress: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    _isMiner(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    _levelOneLockAmount(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    _levelRates(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    _secondsRate(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    _token(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    decimalsUnit(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    defaultParent(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    getLockAmount(
      userAddress: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getParentAddress(
      userAddress: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getRecommendAccounts(
      userAddress: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getUnlockAmount(
      userAddress: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getUserInfo(
      account: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getUserUnlockTimeAndAmount(
      userAddress: string,
      unlockTime: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getUserUnlockTimeAndAmountKeys(
      userAddress: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getWaitHarvest(
      userAddress: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    harvest(
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    harvestUnlockAmount(
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    init(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    inviteRate(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    lock(
      msgSender: string,
      amount: BigNumberish,
      parent: string,
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    lockByMiner(
      recipient: string,
      amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    lockInit(
      recipient: string,
      amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    owner(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    relock(
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    renounceOwnership(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    replaceFromAddress(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    replaceToAddress(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    returnTransferIn(
      con: string,
      addr: string,
      fee: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    setAssessLevel(
      leves: BigNumberish[],
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    setDefaultParentAddress(
      parent: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    setHalveTime(
      time: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    setHarvestFee(
      rate: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    setInviteRate(
      rate: BigNumberish[],
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    setLevelOneLockAmount(
      levelOneLockAmount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    setLevesRate(
      levesRate: BigNumberish[],
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    setMiner(
      minerAddress: string,
      isMiner: boolean,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    setParentAddress(
      user: string,
      parent: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    setReplaceAddress(
      from: string,
      to: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    transferOwnership(
      newOwner: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    unlockByTime(
      recipient: string,
      _unlockTime: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    userInfos(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;
  };
}
