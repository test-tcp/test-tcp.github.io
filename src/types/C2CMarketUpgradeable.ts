/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import {
  BaseContract,
  BigNumber,
  BigNumberish,
  BytesLike,
  CallOverrides,
  ContractTransaction,
  Overrides,
  PayableOverrides,
  PopulatedTransaction,
  Signer,
  utils,
} from "ethers";
import { FunctionFragment, Result, EventFragment } from "@ethersproject/abi";
import { Listener, Provider } from "@ethersproject/providers";
import { TypedEventFilter, TypedEvent, TypedListener, OnEvent } from "./common";

export declare namespace C2CMarketUpgradeable {
  export type CallStruct = { target: string; callData: BytesLike };

  export type CallStructOutput = [string, string] & {
    target: string;
    callData: string;
  };
}

export interface C2CMarketUpgradeableInterface extends utils.Interface {
  contractName: "C2CMarketUpgradeable";
  functions: {
    "ADVERTISE_ROLE()": FunctionFragment;
    "DEFAULT_ADMIN_ROLE()": FunctionFragment;
    "FEE_FACTOR()": FunctionFragment;
    "MINTER_ROLE()": FunctionFragment;
    "OPERATE_ROLE()": FunctionFragment;
    "PAUSER_ROLE()": FunctionFragment;
    "addC2CAdvertise(address,string,uint256,uint256,uint256,uint256,address,address)": FunctionFragment;
    "advertiseAt(uint256)": FunctionFragment;
    "advertiseIds()": FunctionFragment;
    "advertiseLength()": FunctionFragment;
    "aggregate((address,bytes)[])": FunctionFragment;
    "c2CAdvertiseMap(uint256)": FunctionFragment;
    "c2COrderMap(uint256)": FunctionFragment;
    "createC2COrder(uint256,uint256)": FunctionFragment;
    "editC2CAdvertise(uint256,string,uint256,uint256,uint256,uint256)": FunctionFragment;
    "editFeeFactor(uint256)": FunctionFragment;
    "editOperate(address,uint256)": FunctionFragment;
    "getBlockHash(uint256)": FunctionFragment;
    "getCurrentBlockCoinbase()": FunctionFragment;
    "getCurrentBlockDifficulty()": FunctionFragment;
    "getCurrentBlockGasLimit()": FunctionFragment;
    "getCurrentBlockTimestamp()": FunctionFragment;
    "getEthBalance(address)": FunctionFragment;
    "getLastBlockHash()": FunctionFragment;
    "getRoleAdmin(bytes32)": FunctionFragment;
    "getRoleMember(bytes32,uint256)": FunctionFragment;
    "getRoleMemberCount(bytes32)": FunctionFragment;
    "grantRole(bytes32,address)": FunctionFragment;
    "hasRole(bytes32,address)": FunctionFragment;
    "idOfOrderIds(uint256,uint256)": FunctionFragment;
    "initialize()": FunctionFragment;
    "operateAt(uint256)": FunctionFragment;
    "operateIds()": FunctionFragment;
    "operateLength()": FunctionFragment;
    "operateMapFactor(address)": FunctionFragment;
    "orderAt(uint256)": FunctionFragment;
    "orderIds()": FunctionFragment;
    "orderLength()": FunctionFragment;
    "ownerC2COrderIds(address)": FunctionFragment;
    "ownerC2COrderLength(address)": FunctionFragment;
    "ownerC2COrderMap(address,uint256)": FunctionFragment;
    "removeC2CAdvertise(uint256)": FunctionFragment;
    "removeOperate(address)": FunctionFragment;
    "renounceRole(bytes32,address)": FunctionFragment;
    "returnTransferIn(address,bool,address,uint256)": FunctionFragment;
    "revokeRole(bytes32,address)": FunctionFragment;
    "supportsInterface(bytes4)": FunctionFragment;
  };

  encodeFunctionData(
    functionFragment: "ADVERTISE_ROLE",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "DEFAULT_ADMIN_ROLE",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "FEE_FACTOR",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "MINTER_ROLE",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "OPERATE_ROLE",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "PAUSER_ROLE",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "addC2CAdvertise",
    values: [
      string,
      string,
      BigNumberish,
      BigNumberish,
      BigNumberish,
      BigNumberish,
      string,
      string
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "advertiseAt",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "advertiseIds",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "advertiseLength",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "aggregate",
    values: [C2CMarketUpgradeable.CallStruct[]]
  ): string;
  encodeFunctionData(
    functionFragment: "c2CAdvertiseMap",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "c2COrderMap",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "createC2COrder",
    values: [BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "editC2CAdvertise",
    values: [
      BigNumberish,
      string,
      BigNumberish,
      BigNumberish,
      BigNumberish,
      BigNumberish
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "editFeeFactor",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "editOperate",
    values: [string, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "getBlockHash",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "getCurrentBlockCoinbase",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getCurrentBlockDifficulty",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getCurrentBlockGasLimit",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getCurrentBlockTimestamp",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getEthBalance",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "getLastBlockHash",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getRoleAdmin",
    values: [BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "getRoleMember",
    values: [BytesLike, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "getRoleMemberCount",
    values: [BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "grantRole",
    values: [BytesLike, string]
  ): string;
  encodeFunctionData(
    functionFragment: "hasRole",
    values: [BytesLike, string]
  ): string;
  encodeFunctionData(
    functionFragment: "idOfOrderIds",
    values: [BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "initialize",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "operateAt",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "operateIds",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "operateLength",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "operateMapFactor",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "orderAt",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(functionFragment: "orderIds", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "orderLength",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "ownerC2COrderIds",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "ownerC2COrderLength",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "ownerC2COrderMap",
    values: [string, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "removeC2CAdvertise",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "removeOperate",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "renounceRole",
    values: [BytesLike, string]
  ): string;
  encodeFunctionData(
    functionFragment: "returnTransferIn",
    values: [string, boolean, string, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "revokeRole",
    values: [BytesLike, string]
  ): string;
  encodeFunctionData(
    functionFragment: "supportsInterface",
    values: [BytesLike]
  ): string;

  decodeFunctionResult(
    functionFragment: "ADVERTISE_ROLE",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "DEFAULT_ADMIN_ROLE",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "FEE_FACTOR", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "MINTER_ROLE",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "OPERATE_ROLE",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "PAUSER_ROLE",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "addC2CAdvertise",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "advertiseAt",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "advertiseIds",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "advertiseLength",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "aggregate", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "c2CAdvertiseMap",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "c2COrderMap",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "createC2COrder",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "editC2CAdvertise",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "editFeeFactor",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "editOperate",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getBlockHash",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getCurrentBlockCoinbase",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getCurrentBlockDifficulty",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getCurrentBlockGasLimit",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getCurrentBlockTimestamp",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getEthBalance",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getLastBlockHash",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getRoleAdmin",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getRoleMember",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getRoleMemberCount",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "grantRole", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "hasRole", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "idOfOrderIds",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "initialize", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "operateAt", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "operateIds", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "operateLength",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "operateMapFactor",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "orderAt", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "orderIds", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "orderLength",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "ownerC2COrderIds",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "ownerC2COrderLength",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "ownerC2COrderMap",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "removeC2CAdvertise",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "removeOperate",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "renounceRole",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "returnTransferIn",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "revokeRole", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "supportsInterface",
    data: BytesLike
  ): Result;

  events: {
    "AddC2CAdvertised(uint256,address,string,uint256,uint256,uint256,uint256,address,address)": EventFragment;
    "AddC2COrderd(uint256,address,uint256,address,uint256,uint256,uint256,uint256)": EventFragment;
    "AddOperated(address,uint256)": EventFragment;
    "RemoveC2CAdvertised(uint256)": EventFragment;
    "RemoveC2COrderd(uint256)": EventFragment;
    "RemoveOperated(address)": EventFragment;
    "RoleAdminChanged(bytes32,bytes32,bytes32)": EventFragment;
    "RoleGranted(bytes32,address,address)": EventFragment;
    "RoleRevoked(bytes32,address,address)": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "AddC2CAdvertised"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "AddC2COrderd"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "AddOperated"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "RemoveC2CAdvertised"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "RemoveC2COrderd"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "RemoveOperated"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "RoleAdminChanged"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "RoleGranted"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "RoleRevoked"): EventFragment;
}

export type AddC2CAdvertisedEvent = TypedEvent<
  [
    BigNumber,
    string,
    string,
    BigNumber,
    BigNumber,
    BigNumber,
    BigNumber,
    string,
    string
  ],
  {
    id: BigNumber;
    owner: string;
    nickName: string;
    total: BigNumber;
    price: BigNumber;
    min: BigNumber;
    max: BigNumber;
    sellToken: string;
    receiveToken: string;
  }
>;

export type AddC2CAdvertisedEventFilter =
  TypedEventFilter<AddC2CAdvertisedEvent>;

export type AddC2COrderdEvent = TypedEvent<
  [
    BigNumber,
    string,
    BigNumber,
    string,
    BigNumber,
    BigNumber,
    BigNumber,
    BigNumber
  ],
  {
    id: BigNumber;
    owner: string;
    adId: BigNumber;
    seller: string;
    quantity: BigNumber;
    price: BigNumber;
    amount: BigNumber;
    createTime: BigNumber;
  }
>;

export type AddC2COrderdEventFilter = TypedEventFilter<AddC2COrderdEvent>;

export type AddOperatedEvent = TypedEvent<
  [string, BigNumber],
  { operate: string; factor: BigNumber }
>;

export type AddOperatedEventFilter = TypedEventFilter<AddOperatedEvent>;

export type RemoveC2CAdvertisedEvent = TypedEvent<
  [BigNumber],
  { id: BigNumber }
>;

export type RemoveC2CAdvertisedEventFilter =
  TypedEventFilter<RemoveC2CAdvertisedEvent>;

export type RemoveC2COrderdEvent = TypedEvent<[BigNumber], { id: BigNumber }>;

export type RemoveC2COrderdEventFilter = TypedEventFilter<RemoveC2COrderdEvent>;

export type RemoveOperatedEvent = TypedEvent<[string], { operate: string }>;

export type RemoveOperatedEventFilter = TypedEventFilter<RemoveOperatedEvent>;

export type RoleAdminChangedEvent = TypedEvent<
  [string, string, string],
  { role: string; previousAdminRole: string; newAdminRole: string }
>;

export type RoleAdminChangedEventFilter =
  TypedEventFilter<RoleAdminChangedEvent>;

export type RoleGrantedEvent = TypedEvent<
  [string, string, string],
  { role: string; account: string; sender: string }
>;

export type RoleGrantedEventFilter = TypedEventFilter<RoleGrantedEvent>;

export type RoleRevokedEvent = TypedEvent<
  [string, string, string],
  { role: string; account: string; sender: string }
>;

export type RoleRevokedEventFilter = TypedEventFilter<RoleRevokedEvent>;

export interface C2CMarketUpgradeable extends BaseContract {
  contractName: "C2CMarketUpgradeable";
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  interface: C2CMarketUpgradeableInterface;

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TEvent>>;

  listeners<TEvent extends TypedEvent>(
    eventFilter?: TypedEventFilter<TEvent>
  ): Array<TypedListener<TEvent>>;
  listeners(eventName?: string): Array<Listener>;
  removeAllListeners<TEvent extends TypedEvent>(
    eventFilter: TypedEventFilter<TEvent>
  ): this;
  removeAllListeners(eventName?: string): this;
  off: OnEvent<this>;
  on: OnEvent<this>;
  once: OnEvent<this>;
  removeListener: OnEvent<this>;

  functions: {
    ADVERTISE_ROLE(overrides?: CallOverrides): Promise<[string]>;

    DEFAULT_ADMIN_ROLE(overrides?: CallOverrides): Promise<[string]>;

    FEE_FACTOR(overrides?: CallOverrides): Promise<[BigNumber]>;

    MINTER_ROLE(overrides?: CallOverrides): Promise<[string]>;

    OPERATE_ROLE(overrides?: CallOverrides): Promise<[string]>;

    PAUSER_ROLE(overrides?: CallOverrides): Promise<[string]>;

    addC2CAdvertise(
      owner: string,
      nickName: string,
      total: BigNumberish,
      price: BigNumberish,
      min: BigNumberish,
      max: BigNumberish,
      sellToken: string,
      receiveToken: string,
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    advertiseAt(
      index: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    advertiseIds(overrides?: CallOverrides): Promise<[BigNumber[]]>;

    advertiseLength(overrides?: CallOverrides): Promise<[BigNumber]>;

    aggregate(
      calls: C2CMarketUpgradeable.CallStruct[],
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    c2CAdvertiseMap(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<
      [
        BigNumber,
        string,
        string,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        string,
        string
      ] & {
        id: BigNumber;
        owner: string;
        nickName: string;
        total: BigNumber;
        sold: BigNumber;
        price: BigNumber;
        min: BigNumber;
        max: BigNumber;
        sellToken: string;
        receiveToken: string;
      }
    >;

    c2COrderMap(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<
      [
        BigNumber,
        string,
        BigNumber,
        string,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber
      ] & {
        id: BigNumber;
        owner: string;
        adId: BigNumber;
        seller: string;
        quantity: BigNumber;
        price: BigNumber;
        amount: BigNumber;
        createTime: BigNumber;
      }
    >;

    createC2COrder(
      adId: BigNumberish,
      quantity: BigNumberish,
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    editC2CAdvertise(
      id: BigNumberish,
      nickName: string,
      total: BigNumberish,
      price: BigNumberish,
      min: BigNumberish,
      max: BigNumberish,
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    editFeeFactor(
      factor: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    editOperate(
      operate: string,
      factor: BigNumberish,
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    getBlockHash(
      blockNumber: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[string] & { blockHash: string }>;

    getCurrentBlockCoinbase(
      overrides?: CallOverrides
    ): Promise<[string] & { coinbase: string }>;

    getCurrentBlockDifficulty(
      overrides?: CallOverrides
    ): Promise<[BigNumber] & { difficulty: BigNumber }>;

    getCurrentBlockGasLimit(
      overrides?: CallOverrides
    ): Promise<[BigNumber] & { gaslimit: BigNumber }>;

    getCurrentBlockTimestamp(
      overrides?: CallOverrides
    ): Promise<[BigNumber] & { timestamp: BigNumber }>;

    getEthBalance(
      addr: string,
      overrides?: CallOverrides
    ): Promise<[BigNumber] & { balance: BigNumber }>;

    getLastBlockHash(
      overrides?: CallOverrides
    ): Promise<[string] & { blockHash: string }>;

    getRoleAdmin(role: BytesLike, overrides?: CallOverrides): Promise<[string]>;

    getRoleMember(
      role: BytesLike,
      index: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[string]>;

    getRoleMemberCount(
      role: BytesLike,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    grantRole(
      role: BytesLike,
      account: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    hasRole(
      role: BytesLike,
      account: string,
      overrides?: CallOverrides
    ): Promise<[boolean]>;

    idOfOrderIds(
      arg0: BigNumberish,
      arg1: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    initialize(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    operateAt(
      index: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[string]>;

    operateIds(overrides?: CallOverrides): Promise<[string[]]>;

    operateLength(overrides?: CallOverrides): Promise<[BigNumber]>;

    operateMapFactor(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    orderAt(
      index: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    orderIds(overrides?: CallOverrides): Promise<[BigNumber[]]>;

    orderLength(overrides?: CallOverrides): Promise<[BigNumber]>;

    ownerC2COrderIds(
      owner: string,
      overrides?: CallOverrides
    ): Promise<[BigNumber[]]>;

    ownerC2COrderLength(
      owner: string,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    ownerC2COrderMap(
      arg0: string,
      arg1: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    removeC2CAdvertise(
      id: BigNumberish,
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    removeOperate(
      operate: string,
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    renounceRole(
      role: BytesLike,
      account: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    returnTransferIn(
      to: string,
      isETH: boolean,
      currency: string,
      amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    revokeRole(
      role: BytesLike,
      account: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    supportsInterface(
      interfaceId: BytesLike,
      overrides?: CallOverrides
    ): Promise<[boolean]>;
  };

  ADVERTISE_ROLE(overrides?: CallOverrides): Promise<string>;

  DEFAULT_ADMIN_ROLE(overrides?: CallOverrides): Promise<string>;

  FEE_FACTOR(overrides?: CallOverrides): Promise<BigNumber>;

  MINTER_ROLE(overrides?: CallOverrides): Promise<string>;

  OPERATE_ROLE(overrides?: CallOverrides): Promise<string>;

  PAUSER_ROLE(overrides?: CallOverrides): Promise<string>;

  addC2CAdvertise(
    owner: string,
    nickName: string,
    total: BigNumberish,
    price: BigNumberish,
    min: BigNumberish,
    max: BigNumberish,
    sellToken: string,
    receiveToken: string,
    overrides?: PayableOverrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  advertiseAt(
    index: BigNumberish,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  advertiseIds(overrides?: CallOverrides): Promise<BigNumber[]>;

  advertiseLength(overrides?: CallOverrides): Promise<BigNumber>;

  aggregate(
    calls: C2CMarketUpgradeable.CallStruct[],
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  c2CAdvertiseMap(
    arg0: BigNumberish,
    overrides?: CallOverrides
  ): Promise<
    [
      BigNumber,
      string,
      string,
      BigNumber,
      BigNumber,
      BigNumber,
      BigNumber,
      BigNumber,
      string,
      string
    ] & {
      id: BigNumber;
      owner: string;
      nickName: string;
      total: BigNumber;
      sold: BigNumber;
      price: BigNumber;
      min: BigNumber;
      max: BigNumber;
      sellToken: string;
      receiveToken: string;
    }
  >;

  c2COrderMap(
    arg0: BigNumberish,
    overrides?: CallOverrides
  ): Promise<
    [
      BigNumber,
      string,
      BigNumber,
      string,
      BigNumber,
      BigNumber,
      BigNumber,
      BigNumber
    ] & {
      id: BigNumber;
      owner: string;
      adId: BigNumber;
      seller: string;
      quantity: BigNumber;
      price: BigNumber;
      amount: BigNumber;
      createTime: BigNumber;
    }
  >;

  createC2COrder(
    adId: BigNumberish,
    quantity: BigNumberish,
    overrides?: PayableOverrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  editC2CAdvertise(
    id: BigNumberish,
    nickName: string,
    total: BigNumberish,
    price: BigNumberish,
    min: BigNumberish,
    max: BigNumberish,
    overrides?: PayableOverrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  editFeeFactor(
    factor: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  editOperate(
    operate: string,
    factor: BigNumberish,
    overrides?: PayableOverrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  getBlockHash(
    blockNumber: BigNumberish,
    overrides?: CallOverrides
  ): Promise<string>;

  getCurrentBlockCoinbase(overrides?: CallOverrides): Promise<string>;

  getCurrentBlockDifficulty(overrides?: CallOverrides): Promise<BigNumber>;

  getCurrentBlockGasLimit(overrides?: CallOverrides): Promise<BigNumber>;

  getCurrentBlockTimestamp(overrides?: CallOverrides): Promise<BigNumber>;

  getEthBalance(addr: string, overrides?: CallOverrides): Promise<BigNumber>;

  getLastBlockHash(overrides?: CallOverrides): Promise<string>;

  getRoleAdmin(role: BytesLike, overrides?: CallOverrides): Promise<string>;

  getRoleMember(
    role: BytesLike,
    index: BigNumberish,
    overrides?: CallOverrides
  ): Promise<string>;

  getRoleMemberCount(
    role: BytesLike,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  grantRole(
    role: BytesLike,
    account: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  hasRole(
    role: BytesLike,
    account: string,
    overrides?: CallOverrides
  ): Promise<boolean>;

  idOfOrderIds(
    arg0: BigNumberish,
    arg1: BigNumberish,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  initialize(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  operateAt(index: BigNumberish, overrides?: CallOverrides): Promise<string>;

  operateIds(overrides?: CallOverrides): Promise<string[]>;

  operateLength(overrides?: CallOverrides): Promise<BigNumber>;

  operateMapFactor(arg0: string, overrides?: CallOverrides): Promise<BigNumber>;

  orderAt(index: BigNumberish, overrides?: CallOverrides): Promise<BigNumber>;

  orderIds(overrides?: CallOverrides): Promise<BigNumber[]>;

  orderLength(overrides?: CallOverrides): Promise<BigNumber>;

  ownerC2COrderIds(
    owner: string,
    overrides?: CallOverrides
  ): Promise<BigNumber[]>;

  ownerC2COrderLength(
    owner: string,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  ownerC2COrderMap(
    arg0: string,
    arg1: BigNumberish,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  removeC2CAdvertise(
    id: BigNumberish,
    overrides?: PayableOverrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  removeOperate(
    operate: string,
    overrides?: PayableOverrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  renounceRole(
    role: BytesLike,
    account: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  returnTransferIn(
    to: string,
    isETH: boolean,
    currency: string,
    amount: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  revokeRole(
    role: BytesLike,
    account: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  supportsInterface(
    interfaceId: BytesLike,
    overrides?: CallOverrides
  ): Promise<boolean>;

  callStatic: {
    ADVERTISE_ROLE(overrides?: CallOverrides): Promise<string>;

    DEFAULT_ADMIN_ROLE(overrides?: CallOverrides): Promise<string>;

    FEE_FACTOR(overrides?: CallOverrides): Promise<BigNumber>;

    MINTER_ROLE(overrides?: CallOverrides): Promise<string>;

    OPERATE_ROLE(overrides?: CallOverrides): Promise<string>;

    PAUSER_ROLE(overrides?: CallOverrides): Promise<string>;

    addC2CAdvertise(
      owner: string,
      nickName: string,
      total: BigNumberish,
      price: BigNumberish,
      min: BigNumberish,
      max: BigNumberish,
      sellToken: string,
      receiveToken: string,
      overrides?: CallOverrides
    ): Promise<void>;

    advertiseAt(
      index: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    advertiseIds(overrides?: CallOverrides): Promise<BigNumber[]>;

    advertiseLength(overrides?: CallOverrides): Promise<BigNumber>;

    aggregate(
      calls: C2CMarketUpgradeable.CallStruct[],
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, string[]] & { blockNumber: BigNumber; returnData: string[] }
    >;

    c2CAdvertiseMap(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<
      [
        BigNumber,
        string,
        string,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        string,
        string
      ] & {
        id: BigNumber;
        owner: string;
        nickName: string;
        total: BigNumber;
        sold: BigNumber;
        price: BigNumber;
        min: BigNumber;
        max: BigNumber;
        sellToken: string;
        receiveToken: string;
      }
    >;

    c2COrderMap(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<
      [
        BigNumber,
        string,
        BigNumber,
        string,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber
      ] & {
        id: BigNumber;
        owner: string;
        adId: BigNumber;
        seller: string;
        quantity: BigNumber;
        price: BigNumber;
        amount: BigNumber;
        createTime: BigNumber;
      }
    >;

    createC2COrder(
      adId: BigNumberish,
      quantity: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    editC2CAdvertise(
      id: BigNumberish,
      nickName: string,
      total: BigNumberish,
      price: BigNumberish,
      min: BigNumberish,
      max: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    editFeeFactor(
      factor: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    editOperate(
      operate: string,
      factor: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    getBlockHash(
      blockNumber: BigNumberish,
      overrides?: CallOverrides
    ): Promise<string>;

    getCurrentBlockCoinbase(overrides?: CallOverrides): Promise<string>;

    getCurrentBlockDifficulty(overrides?: CallOverrides): Promise<BigNumber>;

    getCurrentBlockGasLimit(overrides?: CallOverrides): Promise<BigNumber>;

    getCurrentBlockTimestamp(overrides?: CallOverrides): Promise<BigNumber>;

    getEthBalance(addr: string, overrides?: CallOverrides): Promise<BigNumber>;

    getLastBlockHash(overrides?: CallOverrides): Promise<string>;

    getRoleAdmin(role: BytesLike, overrides?: CallOverrides): Promise<string>;

    getRoleMember(
      role: BytesLike,
      index: BigNumberish,
      overrides?: CallOverrides
    ): Promise<string>;

    getRoleMemberCount(
      role: BytesLike,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    grantRole(
      role: BytesLike,
      account: string,
      overrides?: CallOverrides
    ): Promise<void>;

    hasRole(
      role: BytesLike,
      account: string,
      overrides?: CallOverrides
    ): Promise<boolean>;

    idOfOrderIds(
      arg0: BigNumberish,
      arg1: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    initialize(overrides?: CallOverrides): Promise<void>;

    operateAt(index: BigNumberish, overrides?: CallOverrides): Promise<string>;

    operateIds(overrides?: CallOverrides): Promise<string[]>;

    operateLength(overrides?: CallOverrides): Promise<BigNumber>;

    operateMapFactor(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    orderAt(index: BigNumberish, overrides?: CallOverrides): Promise<BigNumber>;

    orderIds(overrides?: CallOverrides): Promise<BigNumber[]>;

    orderLength(overrides?: CallOverrides): Promise<BigNumber>;

    ownerC2COrderIds(
      owner: string,
      overrides?: CallOverrides
    ): Promise<BigNumber[]>;

    ownerC2COrderLength(
      owner: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    ownerC2COrderMap(
      arg0: string,
      arg1: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    removeC2CAdvertise(
      id: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    removeOperate(operate: string, overrides?: CallOverrides): Promise<void>;

    renounceRole(
      role: BytesLike,
      account: string,
      overrides?: CallOverrides
    ): Promise<void>;

    returnTransferIn(
      to: string,
      isETH: boolean,
      currency: string,
      amount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    revokeRole(
      role: BytesLike,
      account: string,
      overrides?: CallOverrides
    ): Promise<void>;

    supportsInterface(
      interfaceId: BytesLike,
      overrides?: CallOverrides
    ): Promise<boolean>;
  };

  filters: {
    "AddC2CAdvertised(uint256,address,string,uint256,uint256,uint256,uint256,address,address)"(
      id?: BigNumberish | null,
      owner?: string | null,
      nickName?: null,
      total?: null,
      price?: null,
      min?: null,
      max?: null,
      sellToken?: string | null,
      receiveToken?: null
    ): AddC2CAdvertisedEventFilter;
    AddC2CAdvertised(
      id?: BigNumberish | null,
      owner?: string | null,
      nickName?: null,
      total?: null,
      price?: null,
      min?: null,
      max?: null,
      sellToken?: string | null,
      receiveToken?: null
    ): AddC2CAdvertisedEventFilter;

    "AddC2COrderd(uint256,address,uint256,address,uint256,uint256,uint256,uint256)"(
      id?: BigNumberish | null,
      owner?: string | null,
      adId?: BigNumberish | null,
      seller?: null,
      quantity?: null,
      price?: null,
      amount?: null,
      createTime?: null
    ): AddC2COrderdEventFilter;
    AddC2COrderd(
      id?: BigNumberish | null,
      owner?: string | null,
      adId?: BigNumberish | null,
      seller?: null,
      quantity?: null,
      price?: null,
      amount?: null,
      createTime?: null
    ): AddC2COrderdEventFilter;

    "AddOperated(address,uint256)"(
      operate?: string | null,
      factor?: BigNumberish | null
    ): AddOperatedEventFilter;
    AddOperated(
      operate?: string | null,
      factor?: BigNumberish | null
    ): AddOperatedEventFilter;

    "RemoveC2CAdvertised(uint256)"(
      id?: BigNumberish | null
    ): RemoveC2CAdvertisedEventFilter;
    RemoveC2CAdvertised(
      id?: BigNumberish | null
    ): RemoveC2CAdvertisedEventFilter;

    "RemoveC2COrderd(uint256)"(
      id?: BigNumberish | null
    ): RemoveC2COrderdEventFilter;
    RemoveC2COrderd(id?: BigNumberish | null): RemoveC2COrderdEventFilter;

    "RemoveOperated(address)"(
      operate?: string | null
    ): RemoveOperatedEventFilter;
    RemoveOperated(operate?: string | null): RemoveOperatedEventFilter;

    "RoleAdminChanged(bytes32,bytes32,bytes32)"(
      role?: BytesLike | null,
      previousAdminRole?: BytesLike | null,
      newAdminRole?: BytesLike | null
    ): RoleAdminChangedEventFilter;
    RoleAdminChanged(
      role?: BytesLike | null,
      previousAdminRole?: BytesLike | null,
      newAdminRole?: BytesLike | null
    ): RoleAdminChangedEventFilter;

    "RoleGranted(bytes32,address,address)"(
      role?: BytesLike | null,
      account?: string | null,
      sender?: string | null
    ): RoleGrantedEventFilter;
    RoleGranted(
      role?: BytesLike | null,
      account?: string | null,
      sender?: string | null
    ): RoleGrantedEventFilter;

    "RoleRevoked(bytes32,address,address)"(
      role?: BytesLike | null,
      account?: string | null,
      sender?: string | null
    ): RoleRevokedEventFilter;
    RoleRevoked(
      role?: BytesLike | null,
      account?: string | null,
      sender?: string | null
    ): RoleRevokedEventFilter;
  };

  estimateGas: {
    ADVERTISE_ROLE(overrides?: CallOverrides): Promise<BigNumber>;

    DEFAULT_ADMIN_ROLE(overrides?: CallOverrides): Promise<BigNumber>;

    FEE_FACTOR(overrides?: CallOverrides): Promise<BigNumber>;

    MINTER_ROLE(overrides?: CallOverrides): Promise<BigNumber>;

    OPERATE_ROLE(overrides?: CallOverrides): Promise<BigNumber>;

    PAUSER_ROLE(overrides?: CallOverrides): Promise<BigNumber>;

    addC2CAdvertise(
      owner: string,
      nickName: string,
      total: BigNumberish,
      price: BigNumberish,
      min: BigNumberish,
      max: BigNumberish,
      sellToken: string,
      receiveToken: string,
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    advertiseAt(
      index: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    advertiseIds(overrides?: CallOverrides): Promise<BigNumber>;

    advertiseLength(overrides?: CallOverrides): Promise<BigNumber>;

    aggregate(
      calls: C2CMarketUpgradeable.CallStruct[],
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    c2CAdvertiseMap(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    c2COrderMap(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    createC2COrder(
      adId: BigNumberish,
      quantity: BigNumberish,
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    editC2CAdvertise(
      id: BigNumberish,
      nickName: string,
      total: BigNumberish,
      price: BigNumberish,
      min: BigNumberish,
      max: BigNumberish,
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    editFeeFactor(
      factor: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    editOperate(
      operate: string,
      factor: BigNumberish,
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    getBlockHash(
      blockNumber: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getCurrentBlockCoinbase(overrides?: CallOverrides): Promise<BigNumber>;

    getCurrentBlockDifficulty(overrides?: CallOverrides): Promise<BigNumber>;

    getCurrentBlockGasLimit(overrides?: CallOverrides): Promise<BigNumber>;

    getCurrentBlockTimestamp(overrides?: CallOverrides): Promise<BigNumber>;

    getEthBalance(addr: string, overrides?: CallOverrides): Promise<BigNumber>;

    getLastBlockHash(overrides?: CallOverrides): Promise<BigNumber>;

    getRoleAdmin(
      role: BytesLike,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getRoleMember(
      role: BytesLike,
      index: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getRoleMemberCount(
      role: BytesLike,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    grantRole(
      role: BytesLike,
      account: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    hasRole(
      role: BytesLike,
      account: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    idOfOrderIds(
      arg0: BigNumberish,
      arg1: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    initialize(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    operateAt(
      index: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    operateIds(overrides?: CallOverrides): Promise<BigNumber>;

    operateLength(overrides?: CallOverrides): Promise<BigNumber>;

    operateMapFactor(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    orderAt(index: BigNumberish, overrides?: CallOverrides): Promise<BigNumber>;

    orderIds(overrides?: CallOverrides): Promise<BigNumber>;

    orderLength(overrides?: CallOverrides): Promise<BigNumber>;

    ownerC2COrderIds(
      owner: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    ownerC2COrderLength(
      owner: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    ownerC2COrderMap(
      arg0: string,
      arg1: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    removeC2CAdvertise(
      id: BigNumberish,
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    removeOperate(
      operate: string,
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    renounceRole(
      role: BytesLike,
      account: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    returnTransferIn(
      to: string,
      isETH: boolean,
      currency: string,
      amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    revokeRole(
      role: BytesLike,
      account: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    supportsInterface(
      interfaceId: BytesLike,
      overrides?: CallOverrides
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    ADVERTISE_ROLE(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    DEFAULT_ADMIN_ROLE(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    FEE_FACTOR(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    MINTER_ROLE(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    OPERATE_ROLE(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    PAUSER_ROLE(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    addC2CAdvertise(
      owner: string,
      nickName: string,
      total: BigNumberish,
      price: BigNumberish,
      min: BigNumberish,
      max: BigNumberish,
      sellToken: string,
      receiveToken: string,
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    advertiseAt(
      index: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    advertiseIds(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    advertiseLength(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    aggregate(
      calls: C2CMarketUpgradeable.CallStruct[],
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    c2CAdvertiseMap(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    c2COrderMap(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    createC2COrder(
      adId: BigNumberish,
      quantity: BigNumberish,
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    editC2CAdvertise(
      id: BigNumberish,
      nickName: string,
      total: BigNumberish,
      price: BigNumberish,
      min: BigNumberish,
      max: BigNumberish,
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    editFeeFactor(
      factor: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    editOperate(
      operate: string,
      factor: BigNumberish,
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    getBlockHash(
      blockNumber: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getCurrentBlockCoinbase(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getCurrentBlockDifficulty(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getCurrentBlockGasLimit(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getCurrentBlockTimestamp(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getEthBalance(
      addr: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getLastBlockHash(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    getRoleAdmin(
      role: BytesLike,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getRoleMember(
      role: BytesLike,
      index: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getRoleMemberCount(
      role: BytesLike,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    grantRole(
      role: BytesLike,
      account: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    hasRole(
      role: BytesLike,
      account: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    idOfOrderIds(
      arg0: BigNumberish,
      arg1: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    initialize(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    operateAt(
      index: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    operateIds(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    operateLength(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    operateMapFactor(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    orderAt(
      index: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    orderIds(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    orderLength(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    ownerC2COrderIds(
      owner: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    ownerC2COrderLength(
      owner: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    ownerC2COrderMap(
      arg0: string,
      arg1: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    removeC2CAdvertise(
      id: BigNumberish,
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    removeOperate(
      operate: string,
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    renounceRole(
      role: BytesLike,
      account: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    returnTransferIn(
      to: string,
      isETH: boolean,
      currency: string,
      amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    revokeRole(
      role: BytesLike,
      account: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    supportsInterface(
      interfaceId: BytesLike,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;
  };
}
