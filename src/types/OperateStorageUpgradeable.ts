/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import {
  BaseContract,
  BigNumber,
  BigNumberish,
  BytesLike,
  CallOverrides,
  PopulatedTransaction,
  Signer,
  utils,
} from "ethers";
import { FunctionFragment, Result, EventFragment } from "@ethersproject/abi";
import { Listener, Provider } from "@ethersproject/providers";
import { TypedEventFilter, TypedEvent, TypedListener, OnEvent } from "./common";

export interface OperateStorageUpgradeableInterface extends utils.Interface {
  contractName: "OperateStorageUpgradeable";
  functions: {
    "operateAt(uint256)": FunctionFragment;
    "operateIds()": FunctionFragment;
    "operateLength()": FunctionFragment;
    "operateMapFactor(address)": FunctionFragment;
  };

  encodeFunctionData(
    functionFragment: "operateAt",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "operateIds",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "operateLength",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "operateMapFactor",
    values: [string]
  ): string;

  decodeFunctionResult(functionFragment: "operateAt", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "operateIds", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "operateLength",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "operateMapFactor",
    data: BytesLike
  ): Result;

  events: {
    "AddOperated(address,uint256)": EventFragment;
    "RemoveOperated(address)": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "AddOperated"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "RemoveOperated"): EventFragment;
}

export type AddOperatedEvent = TypedEvent<
  [string, BigNumber],
  { operate: string; factor: BigNumber }
>;

export type AddOperatedEventFilter = TypedEventFilter<AddOperatedEvent>;

export type RemoveOperatedEvent = TypedEvent<[string], { operate: string }>;

export type RemoveOperatedEventFilter = TypedEventFilter<RemoveOperatedEvent>;

export interface OperateStorageUpgradeable extends BaseContract {
  contractName: "OperateStorageUpgradeable";
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  interface: OperateStorageUpgradeableInterface;

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TEvent>>;

  listeners<TEvent extends TypedEvent>(
    eventFilter?: TypedEventFilter<TEvent>
  ): Array<TypedListener<TEvent>>;
  listeners(eventName?: string): Array<Listener>;
  removeAllListeners<TEvent extends TypedEvent>(
    eventFilter: TypedEventFilter<TEvent>
  ): this;
  removeAllListeners(eventName?: string): this;
  off: OnEvent<this>;
  on: OnEvent<this>;
  once: OnEvent<this>;
  removeListener: OnEvent<this>;

  functions: {
    operateAt(
      index: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[string]>;

    operateIds(overrides?: CallOverrides): Promise<[string[]]>;

    operateLength(overrides?: CallOverrides): Promise<[BigNumber]>;

    operateMapFactor(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;
  };

  operateAt(index: BigNumberish, overrides?: CallOverrides): Promise<string>;

  operateIds(overrides?: CallOverrides): Promise<string[]>;

  operateLength(overrides?: CallOverrides): Promise<BigNumber>;

  operateMapFactor(arg0: string, overrides?: CallOverrides): Promise<BigNumber>;

  callStatic: {
    operateAt(index: BigNumberish, overrides?: CallOverrides): Promise<string>;

    operateIds(overrides?: CallOverrides): Promise<string[]>;

    operateLength(overrides?: CallOverrides): Promise<BigNumber>;

    operateMapFactor(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;
  };

  filters: {
    "AddOperated(address,uint256)"(
      operate?: string | null,
      factor?: BigNumberish | null
    ): AddOperatedEventFilter;
    AddOperated(
      operate?: string | null,
      factor?: BigNumberish | null
    ): AddOperatedEventFilter;

    "RemoveOperated(address)"(
      operate?: string | null
    ): RemoveOperatedEventFilter;
    RemoveOperated(operate?: string | null): RemoveOperatedEventFilter;
  };

  estimateGas: {
    operateAt(
      index: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    operateIds(overrides?: CallOverrides): Promise<BigNumber>;

    operateLength(overrides?: CallOverrides): Promise<BigNumber>;

    operateMapFactor(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    operateAt(
      index: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    operateIds(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    operateLength(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    operateMapFactor(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;
  };
}
